}
heatReg(5, Umujeres, 'Muj')
#Funcion que hace el graficos de Rvine
heatReg <- function(nodos, Udata, id){
for (nivel in 1:(nodos -1)){
if (nivel == 1){
#Nivel 1 -Copulas sencillas
for (i in 1:(nodos-1)){
heats(Udata[c(i, i+1)], nombre = paste0('C', i, i+1), id)
}
}else{
#Para niveles profundos - Con h's
for (i in 1:(nodos -nivel)){
cops <- cNivel(nodos-nivel, nivel + 1, T = nNodos)
cond <- c(1:(1 + (nivel)+1) )
primer <- abs(max(cond*((-1)^i)))
condicional <- cond[2:(length(cond)-1)]
nomH <- nombreH(c(primer, condicional))
#--- Sacamos las H anidadas
#Obtemos los nombres de las h
if (i %% 2 == 1){
h1 <- nombreH(c(primer, condicional[1:(length(condicional)-1)]))
h2 <- nombreH(c(condicional[length(condicional)],
condicional[1:(length(condicional)-1)]))
}else{
h1 <- nombreH(c(primer, condicional[2:length(condicional)]))
h2 <- nombreH(c(condicional[1],
condicional[2:length(condicional)]))
}
X <- data.frame(h1 = h_select[[h1]],
h2 = h_select[[h2]])
heats(X, nombre = cops[i], id)
if ((i %% 2) == 0) cond <- cond + 1
}
}
}
}
heatReg(5, Umujeres, 'Muj')
#Funcion que hace el graficos de Rvine
heatReg <- function(nodos, Udata, id){
for (nivel in 1:(nodos -1)){
if (nivel == 1){
#Nivel 1 -Copulas sencillas
for (i in 1:(nodos-1)){
heats(Udata[c(i, i+1)], nombre = paste0('C', i, i+1), id)
}
}else{
if ((nNodos-(nivel + 2)) >= 0){
#Para niveles profundos - Con h's
for (i in 1:(nodos -nivel)){
cops <- cNivel(nodos-nivel, nivel + 1, T = nNodos)
cond <- c(1:(1 + (nivel)+1) )
primer <- abs(max(cond*((-1)^i)))
condicional <- cond[2:(length(cond)-1)]
nomH <- nombreH(c(primer, condicional))
#--- Sacamos las H anidadas
#Obtemos los nombres de las h
if (i %% 2 == 1){
h1 <- nombreH(c(primer, condicional[1:(length(condicional)-1)]))
h2 <- nombreH(c(condicional[length(condicional)],
condicional[1:(length(condicional)-1)]))
}else{
h1 <- nombreH(c(primer, condicional[2:length(condicional)]))
h2 <- nombreH(c(condicional[1],
condicional[2:length(condicional)]))
}
X <- data.frame(h1 = h_select[[h1]],
h2 = h_select[[h2]])
heats(X, nombre = cops[i], id)
if ((i %% 2) == 0) cond <- cond + 1
}
}
}
}
}
heatReg(5, Umujeres, 'Muj')
#Funcion que hace el graficos de Rvine
heatReg <- function(nodos, Udata, id){
for (nivel in 1:(nodos -1)){
if (nivel == 1){
#Nivel 1 -Copulas sencillas
for (i in 1:(nodos-1)){
heats(Udata[c(i, i+1)], nombre = paste0('C', i, i+1), id)
}
}else{
if ((nodos-(nivel + 2)) >= 0){
#Para niveles profundos - Con h's
for (i in 1:(nodos -nivel)){
cops <- cNivel(nodos-nivel, nivel + 1, T = nNodos)
cond <- c(1:(1 + (nivel)+1) )
primer <- abs(max(cond*((-1)^i)))
condicional <- cond[2:(length(cond)-1)]
nomH <- nombreH(c(primer, condicional))
#--- Sacamos las H anidadas
#Obtemos los nombres de las h
if (i %% 2 == 1){
h1 <- nombreH(c(primer, condicional[1:(length(condicional)-1)]))
h2 <- nombreH(c(condicional[length(condicional)],
condicional[1:(length(condicional)-1)]))
}else{
h1 <- nombreH(c(primer, condicional[2:length(condicional)]))
h2 <- nombreH(c(condicional[1],
condicional[2:length(condicional)]))
}
X <- data.frame(h1 = h_select[[h1]],
h2 = h_select[[h2]])
heats(X, nombre = cops[i], id)
if ((i %% 2) == 0) cond <- cond + 1
}
}
}
}
}
heatReg(5, Umujeres, 'Muj')
warnings()
cNivel <- function(nCopNivel, paraNivel, T = nNodos){
cop <- c()
secuencia <- c(1, rep(2, (nCopNivel-2)), 1)
if (paraNivel == 2){
l <- 1; j <- 2
for (i in secuencia) {
cop <- c(cop, paste0('C', l, j))
l <- l + 1; j <- j + 1
}
}else{
for (i in 1:length(secuencia)){
ind <- c(i:(i + (paraNivel-1)) )
segundo <- paste(ind[2:(length(ind)-1)], collapse = '')
primer <- paste0('C', ind[1], max(ind), '.', segundo)
cop <- c(cop, primer)
}
}
return(cop)
}
#Funcion que hace el graficos de Rvine
heatReg <- function(nodos, Udata, id){
for (nivel in 1:(nodos -1)){
if (nivel == 1){
#Nivel 1 -Copulas sencillas
for (i in 1:(nodos-1)){
heats(Udata[c(i, i+1)], nombre = paste0('C', i, i+1), id)
}
}else{
if ((nodos-(nivel + 2)) >= 0){
#Para niveles profundos - Con h's
for (i in 1:(nodos -nivel)){
cops <- cNivel(nodos-nivel, nivel + 1, T = nNodos)
cond <- c(1:(1 + (nivel)+1) )
primer <- abs(max(cond*((-1)^i)))
condicional <- cond[2:(length(cond)-1)]
nomH <- nombreH(c(primer, condicional))
#--- Sacamos las H anidadas
#Obtemos los nombres de las h
if (i %% 2 == 1){
h1 <- nombreH(c(primer, condicional[1:(length(condicional)-1)]))
h2 <- nombreH(c(condicional[length(condicional)],
condicional[1:(length(condicional)-1)]))
}else{
h1 <- nombreH(c(primer, condicional[2:length(condicional)]))
h2 <- nombreH(c(condicional[1],
condicional[2:length(condicional)]))
}
X <- data.frame(h1 = h_select[[h1]],
h2 = h_select[[h2]])
heats(X, nombre = cops[i], id)
if ((i %% 2) == 0) cond <- cond + 1
}
}
}
}
}
heatReg(5, Umujeres, 'Muj')
getwd()
heatReg(5, Umujeres, 'Muj')
heatReg(5, Uhombres, 'Hom')
#Funcion que hace el graficos de Rvine
heatReg <- function(nodos, Udata, h_select, id){
for (nivel in 1:(nodos -1)){
if (nivel == 1){
#Nivel 1 -Copulas sencillas
for (i in 1:(nodos-1)){
heats(Udata[c(i, i+1)], nombre = paste0('C', i, i+1), id)
}
}else{
if ((nodos-(nivel + 2)) >= 0){
#Para niveles profundos - Con h's
for (i in 1:(nodos -nivel)){
cops <- cNivel(nodos-nivel, nivel + 1, T = nNodos)
cond <- c(1:(1 + (nivel)+1) )
primer <- abs(max(cond*((-1)^i)))
condicional <- cond[2:(length(cond)-1)]
nomH <- nombreH(c(primer, condicional))
#--- Sacamos las H anidadas
#Obtemos los nombres de las h
if (i %% 2 == 1){
h1 <- nombreH(c(primer, condicional[1:(length(condicional)-1)]))
h2 <- nombreH(c(condicional[length(condicional)],
condicional[1:(length(condicional)-1)]))
}else{
h1 <- nombreH(c(primer, condicional[2:length(condicional)]))
h2 <- nombreH(c(condicional[1],
condicional[2:length(condicional)]))
}
X <- data.frame(h1 = h_select[[h1]],
h2 = h_select[[h2]])
heats(X, nombre = cops[i], id)
if ((i %% 2) == 0) cond <- cond + 1
}
}
}
}
}
setwd('C:/Users/zaboo/OneDrive/Documentos/CIMAT/Tesis/codigo/Mio/4variables/heatmaps')
heatReg(5, Umujeres, h_selectM, 'Muj')
#Funcion que hace el graficos de Rvine
heatReg <- function(nodos, Udata, h_selection, id){
for (nivel in 1:(nodos -1)){
if (nivel == 1){
#Nivel 1 -Copulas sencillas
for (i in 1:(nodos-1)){
heats(Udata[c(i, i+1)], nombre = paste0('C', i, i+1), id)
}
}else{
if ((nodos-(nivel + 2)) >= 0){
#Para niveles profundos - Con h's
for (i in 1:(nodos -nivel)){
cops <- cNivel(nodos-nivel, nivel + 1, T = nNodos)
cond <- c(1:(1 + (nivel)+1) )
primer <- abs(max(cond*((-1)^i)))
condicional <- cond[2:(length(cond)-1)]
nomH <- nombreH(c(primer, condicional))
#--- Sacamos las H anidadas
#Obtemos los nombres de las h
if (i %% 2 == 1){
h1 <- nombreH(c(primer, condicional[1:(length(condicional)-1)]))
h2 <- nombreH(c(condicional[length(condicional)],
condicional[1:(length(condicional)-1)]))
}else{
h1 <- nombreH(c(primer, condicional[2:length(condicional)]))
h2 <- nombreH(c(condicional[1],
condicional[2:length(condicional)]))
}
X <- data.frame(h1 = h_selection[[h1]],
h2 = h_selection[[h2]])
heats(X, nombre = cops[i], id)
if ((i %% 2) == 0) cond <- cond + 1
}
}
}
}
}
heatReg(5, Umujeres, h_selectM, 'Muj')
heatReg(5, Uhombres, h_selectH, 'Hom')
heatReg(5, Utotal, h_selectT, 'Total')
#Funcion que hace el graficos de Rvine
heatReg <- function(nodos, Udata, h_selection, id){
for (nivel in 1:(nodos -1)){
if (nivel == 1){
#Nivel 1 -Copulas sencillas
for (i in 1:(nodos-1)){
a <- 1
#heats(Udata[c(i, i+1)], nombre = paste0('C', i, i+1), id)
}
}else{
if ((nodos-(nivel + 1)) >= 0){
#Para niveles profundos - Con h's
for (i in 1:(nodos -nivel)){
cops <- cNivel(nodos-nivel, nivel + 1, T = nNodos)
print(cops)
cond <- c(1:(1 + (nivel)+1) )
primer <- abs(max(cond*((-1)^i)))
condicional <- cond[2:(length(cond)-1)]
nomH <- nombreH(c(primer, condicional))
#--- Sacamos las H anidadas
#Obtemos los nombres de las h
if (i %% 2 == 1){
h1 <- nombreH(c(primer, condicional[1:(length(condicional)-1)]))
h2 <- nombreH(c(condicional[length(condicional)],
condicional[1:(length(condicional)-1)]))
}else{
h1 <- nombreH(c(primer, condicional[2:length(condicional)]))
h2 <- nombreH(c(condicional[1],
condicional[2:length(condicional)]))
}
X <- data.frame(h1 = h_selection[[h1]],
h2 = h_selection[[h2]])
#heats(X, nombre = cops[i], id)
if ((i %% 2) == 0) cond <- cond + 1
}
}
}
}
}
heatReg(5, Umujeres, h_selectM, 'Muj')
#Copulas para el nivel
cNivel <- function(nCopNivel, paraNivel, T = nNodos){
cop <- c()
secuencia <- rep(0, nCopNivel)
if (paraNivel == 2){
l <- 1; j <- 2
for (i in secuencia) {
cop <- c(cop, paste0('C', l, j))
l <- l + 1; j <- j + 1
}
}else{
for (i in 1:length(secuencia)){
ind <- c(i:(i + (paraNivel-1)) )
segundo <- paste(ind[2:(length(ind)-1)], collapse = '')
primer <- paste0('C', ind[1], max(ind), '.', segundo)
cop <- c(cop, primer)
}
}
return(cop)
}
#Funcion que hace el graficos de Rvine
heatReg <- function(nodos, Udata, h_selection, id){
for (nivel in 1:(nodos -1)){
if (nivel == 1){
#Nivel 1 -Copulas sencillas
for (i in 1:(nodos-1)){
a <- 1
#heats(Udata[c(i, i+1)], nombre = paste0('C', i, i+1), id)
}
}else{
if ((nodos-(nivel + 1)) >= 0){
#Para niveles profundos - Con h's
for (i in 1:(nodos -nivel)){
cops <- cNivel(nodos-nivel, nivel + 1, T = nNodos)
print(cops)
cond <- c(1:(1 + (nivel)+1) )
primer <- abs(max(cond*((-1)^i)))
condicional <- cond[2:(length(cond)-1)]
nomH <- nombreH(c(primer, condicional))
#--- Sacamos las H anidadas
#Obtemos los nombres de las h
if (i %% 2 == 1){
h1 <- nombreH(c(primer, condicional[1:(length(condicional)-1)]))
h2 <- nombreH(c(condicional[length(condicional)],
condicional[1:(length(condicional)-1)]))
}else{
h1 <- nombreH(c(primer, condicional[2:length(condicional)]))
h2 <- nombreH(c(condicional[1],
condicional[2:length(condicional)]))
}
X <- data.frame(h1 = h_selection[[h1]],
h2 = h_selection[[h2]])
#heats(X, nombre = cops[i], id)
if ((i %% 2) == 0) cond <- cond + 1
}
}
}
}
}
heatReg(5, Umujeres, h_selectM, 'Muj')
#Funcion que hace el graficos de Rvine
heatReg <- function(nodos, Udata, h_selection, id){
for (nivel in 1:(nodos -1)){
if (nivel == 1){
#Nivel 1 -Copulas sencillas
for (i in 1:(nodos-1)){
a <- 1
#heats(Udata[c(i, i+1)], nombre = paste0('C', i, i+1), id)
}
}else{
if ((nodos-(nivel + 1)) >= 0){
#Para niveles profundos - Con h's
for (i in 1:(nodos -nivel)){
cops <- cNivel(nodos-nivel, nivel + 1, T = nNodos)
cond <- c(1:(1 + (nivel)+1) )
primer <- abs(max(cond*((-1)^i)))
condicional <- cond[2:(length(cond)-1)]
nomH <- nombreH(c(primer, condicional))
#--- Sacamos las H anidadas
#Obtemos los nombres de las h
if (i %% 2 == 1){
h1 <- nombreH(c(primer, condicional[1:(length(condicional)-1)]))
h2 <- nombreH(c(condicional[length(condicional)],
condicional[1:(length(condicional)-1)]))
}else{
h1 <- nombreH(c(primer, condicional[2:length(condicional)]))
h2 <- nombreH(c(condicional[1],
condicional[2:length(condicional)]))
}
X <- data.frame(h1 = h_selection[[h1]],
h2 = h_selection[[h2]])
#heats(X, nombre = cops[i], id)
print(h1, h2, cops[i])
if ((i %% 2) == 0) cond <- cond + 1
}
}
}
}
}
heatReg(5, Umujeres, h_selectM, 'Muj')
#Funcion que hace el graficos de Rvine
heatReg <- function(nodos, Udata, h_selection, id){
for (nivel in 1:(nodos -1)){
if (nivel == 1){
#Nivel 1 -Copulas sencillas
for (i in 1:(nodos-1)){
a <- 1
#heats(Udata[c(i, i+1)], nombre = paste0('C', i, i+1), id)
}
}else{
if ((nodos-(nivel + 1)) >= 0){
#Para niveles profundos - Con h's
for (i in 1:(nodos -nivel)){
cops <- cNivel(nodos-nivel, nivel + 1, T = nNodos)
cond <- c(1:(1 + (nivel)+1) )
primer <- abs(max(cond*((-1)^i)))
condicional <- cond[2:(length(cond)-1)]
nomH <- nombreH(c(primer, condicional))
#--- Sacamos las H anidadas
#Obtemos los nombres de las h
if (i %% 2 == 1){
h1 <- nombreH(c(primer, condicional[1:(length(condicional)-1)]))
h2 <- nombreH(c(condicional[length(condicional)],
condicional[1:(length(condicional)-1)]))
}else{
h1 <- nombreH(c(primer, condicional[2:length(condicional)]))
h2 <- nombreH(c(condicional[1],
condicional[2:length(condicional)]))
}
X <- data.frame(h1 = h_selection[[h1]],
h2 = h_selection[[h2]])
#heats(X, nombre = cops[i], id)
print(c(h1, h2, cops[i]))
if ((i %% 2) == 0) cond <- cond + 1
}
}
}
}
}
heatReg(5, Umujeres, h_selectM, 'Muj')
#Funcion que hace el graficos de Rvine
heatReg <- function(nodos, Udata, h_selection, id){
for (nivel in 1:(nodos -1)){
if (nivel == 1){
#Nivel 1 -Copulas sencillas
for (i in 1:(nodos-1)){
heats(Udata[c(i, i+1)], nombre = paste0('C', i, i+1), id)
}
}else{
if ((nodos-(nivel + 1)) >= 0){
#Para niveles profundos - Con h's
for (i in 1:(nodos -nivel)){
cops <- cNivel(nodos-nivel, nivel + 1, T = nNodos)
cond <- c(1:(1 + (nivel)+1) )
primer <- abs(max(cond*((-1)^i)))
condicional <- cond[2:(length(cond)-1)]
nomH <- nombreH(c(primer, condicional))
#--- Sacamos las H anidadas
#Obtemos los nombres de las h
if (i %% 2 == 1){
h1 <- nombreH(c(primer, condicional[1:(length(condicional)-1)]))
h2 <- nombreH(c(condicional[length(condicional)],
condicional[1:(length(condicional)-1)]))
}else{
h1 <- nombreH(c(primer, condicional[2:length(condicional)]))
h2 <- nombreH(c(condicional[1],
condicional[2:length(condicional)]))
}
X <- data.frame(h1 = h_selection[[h1]],
h2 = h_selection[[h2]])
heats(X, nombre = cops[i], id)
print(c(h1, h2, cops[i]))
if ((i %% 2) == 0) cond <- cond + 1
}
}
}
}
}
heatReg(5, Umujeres, h_selectM, 'Muj')
heatReg(5, Uhombres, h_selectH, 'Hom')
heatReg(5, Utotal, h_selectT, 'Total')
#Funcion que hace el graficos de Rvine
heatReg <- function(nodos, Udata, h_selection, id){
for (nivel in 1:(nodos -1)){
if (nivel == 1){
#Nivel 1 -Copulas sencillas
for (i in 1:(nodos-1)){
heats(Udata[c(i, i+1)], nombre = paste0('C', i, i+1), id)
}
}else{
if ((nodos-(nivel + 1)) >= 0){
#Para niveles profundos - Con h's
for (i in 1:(nodos -nivel)){
cops <- cNivel(nodos-nivel, nivel + 1, T = nNodos)
cond <- c(1:(1 + (nivel)+1) )
primer <- abs(max(cond*((-1)^i)))
condicional <- cond[2:(length(cond)-1)]
nomH <- nombreH(c(primer, condicional))
#--- Sacamos las H anidadas
#Obtemos los nombres de las h
if (i %% 2 == 1){
h1 <- nombreH(c(primer, condicional[1:(length(condicional)-1)]))
h2 <- nombreH(c(condicional[length(condicional)],
condicional[1:(length(condicional)-1)]))
}else{
h1 <- nombreH(c(primer, condicional[2:length(condicional)]))
h2 <- nombreH(c(condicional[1],
condicional[2:length(condicional)]))
}
X <- data.frame(h1 = h_selection[[h1]],
h2 = h_selection[[h2]])
heats(X, nombre = cops[i], id)
if ((i %% 2) == 0) cond <- cond + 1
}
}
}
}
}
